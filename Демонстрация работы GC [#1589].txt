2. Исходя из информации п.3 и из особенностей типа String:  
    private final char value[];
    private final int offset;
    private final int count;
    private int hash;

Так как строка содержит ссылку на массив символов, то, по сути, 
мы имеем дело с двумя разными объектами — объектом класса String и самим массивом, который хранит строку.

Заголовок: 16 байт
Поля int: 4 байта * 3 == 12 байт
Ссылочная переменная на объект массива: 4 байта
Итого: 32 байта

new char[10]
Заголовок: 16 байт
Примитивы char: 2 байта * 10 == 20 байт
Выравнивание для кратности 8 : 4 байта
Итого: 40 байт

Итого, new String("a") == 72 байта

Соответственно, объект User с двумя полями типа String должен занимать в памяти примерно 16 + 2*72 = 160байт

3. Минимальный размер объекта для современного 64-битного JDK составляет 16 байт, так как объект имеет 
12-байтовый заголовок, дополненный до размера, кратного 8-ми байтам.

4. Минимально возможные ключи, которые удалось установить - 2Мб.

5. Зависимости в частоте запуска ГК выявить не удалось, однако при увеличении количества создаваемых объектов,
удалось (с помощью логов и ключа -verbose:gc) отследить некоторые этапы GC и отметить затрачиваемое на их
выполнение время, например:
GC(52) Concurrent Mark Cycle 18.380ms - "пометка"
GC(55) Pause Young (Normal) (G1 Evacuation Pause) 1M->1M(2M) 0.384ms - minor GC
GC(60) Pause Full (G1 Evacuation Pause) 1M->1M(2M) 7.240ms - full GC